name: Build, Push and Deploy WeatherApp

on:
  push:
    branches:
      - main

jobs:
  checkout:
    name: Checkout Code
    runs-on: ubuntu-latest
    outputs:
      repo-path: ${{ steps.set-path.outputs.repo-path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set path output (optional)
        id: set-path
        run: echo "repo-path=weather-app" >> $GITHUB_OUTPUT

  build-auth:
    name: Build Auth Service
    needs: checkout
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/build-push-action@v5
        with:
          context: ./weather-app/auth
          file: ./weather-app/auth/Dockerfile
          push: true
          tags: ${{ vars.DOCKER_USERNAME }}/weather-auth:latest

  build-db:
    name: Build DB Service
    needs: checkout
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/build-push-action@v5
        with:
          context: ./weather-app/db
          file: ./weather-app/db/Dockerfile
          push: true
          tags: ${{ vars.DOCKER_USERNAME }}/weather-db:latest

  build-redis:
    name: Build Redis Service
    needs: checkout
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/build-push-action@v5
        with:
          context: ./weather-app/redis
          file: ./weather-app/redis/Dockerfile
          push: true
          tags: ${{ vars.DOCKER_USERNAME }}/weather-redis:latest

  build-ui:
    name: Build UI Service
    needs: checkout
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/build-push-action@v5
        with:
          context: ./weather-app/ui
          file: ./weather-app/ui/Dockerfile
          push: true
          tags: ${{ vars.DOCKER_USERNAME }}/weather-ui:latest

  build-weather:
    name: Build Weather Service
    needs: checkout
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/build-push-action@v5
        with:
          context: ./weather-app/weather
          file: ./weather-app/weather/Dockerfile
          push: true
          tags: ${{ vars.DOCKER_USERNAME }}/weather-weather:latest

  deploy:
    name: SSH to EC2, Copy Code, and Pull Images
    needs:
      - build-auth
      - build-db
      - build-redis
      - build-ui
      - build-weather
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create SSH key file
        run: |
          printf "%s" "${{ secrets.MAC_SSH_KEY }}" > mac_key.pem
          chmod 400 mac_key.pem

      - name: Copy Code to EC2
        run: |
          rsync -avz -e "ssh -o StrictHostKeyChecking=no -i mac_key.pem" ./ ubuntu@${{ vars.EC2_HOST }}:/home/ubuntu/weather-app/

      - name: SSH, Pull Docker Images, and Deploy
        run: |
          ssh -o StrictHostKeyChecking=no -i mac_key.pem ubuntu@${{ vars.EC2_HOST }} << EOF
            echo "✅ Logging into Docker..."
            echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u "${{ vars.DOCKER_USERNAME }}" --password-stdin

            echo "📦 Pulling latest service images..."
            sudo docker pull vanessasaha/weather-auth:latest
            sudo docker pull vanessasaha/weather-db:latest
            sudo docker pull vanessasaha/weather-redis:latest
            sudo docker pull vanessasaha/weather-ui:latest
            sudo docker pull vanessasaha/weather-weather:latest

            echo "🔄 Replacing image variables..."
            cd /home/ubuntu/weather-app/docker-compose
            sed -i 's|WEATHER_APP_AUTH|vanessasaha/weather-auth:latest|g' docker-compose.yml
            sed -i 's|WEATHER_APP_DB|vanessasaha/weather-db:latest|g' docker-compose.yml
            sed -i 's|WEATHER_APP_REDIS|vanessasaha/weather-redis:latest|g' docker-compose.yml
            sed -i 's|WEATHER_APP_UI|vanessasaha/weather-ui:latest|g' docker-compose.yml
            sed -i 's|WEATHER_WEATHER|vanessasaha/weather-weather:latest|g' docker-compose.yml

            echo "🛑 Stopping existing containers..."
            sudo docker-compose down -v

            echo "🚀 Deploying new containers..."
            sudo docker-compose up -d

            echo "✅ Deployment complete. Running containers:"
            sudo docker ps
          EOF

  slack:
    name: Send Slack Notification
    needs: [deploy]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Set Slack Message Data
        id: slack-data
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "status=✅ Deployment Succeeded" >> $GITHUB_OUTPUT
            echo "color=good" >> $GITHUB_OUTPUT
          else
            echo "status=❌ Deployment Failed" >> $GITHUB_OUTPUT
            echo "color=danger" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack Notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data "$(jq -n \
            --arg pretext "${{ steps.slack-data.outputs.status }}" \
            --arg color "${{ steps.slack-data.outputs.color }}" \
            --arg repo "${{ github.repository }}" \
            --arg branch "${{ github.ref_name }}" \
            --arg actor "${{ github.actor }}" \
            --arg run_url "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            '{
              attachments: [
                {
                  pretext: $pretext,
                  color: $color,
                  fields: [
                    { title: "Repository", value: $repo, short: true },
                    { title: "Branch", value: $branch, short: true },
                    { title: "Triggered By", value: $actor, short: true },
                    { title: "Run", value: $run_url, short: false }
                  ],
                  ts: (now | tostring)
                }
              ]
            }')" \
            "$SLACK_WEBHOOK_URL"
